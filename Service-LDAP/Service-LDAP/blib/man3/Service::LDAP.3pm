.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Service::LDAP 3pm"
.TH Service::LDAP 3pm "2022-01-28" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Service::LDAP \- Perl API for Active Directory
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Service::LDAP;
\&
\&  # Login and Bind
\&  my $ldap = Service::LDAP\->new({bind_account => $bindaccount, bind_password => $password, base_dn => $base, host => $host});
\&
\&  # Get companies
\&  my $companies = $ldap\->list_companies();
\&  
\&  # Get the departments
\&  my $Dept = $ldap\->list_departments({company => $company});
\&
\&  # List USER GROUPS
\&  my $Grp = $ldap\->list_groups();
\&
\&  # Get group
\&  my $group_get = $ldap\->get_groups({group => $group, filter => $filter});
\&
\&  # Get Group Members
\&  my $mems = $ldap\->group_members({group => "APPLICATIONS", filter => "MANAGEMENT" })
\&
\&  # Get User by DN / Sid / sAMAccountName
\&  my $user = $ldap\->user_get({filter => $sAMAccountName });
\&
\&  # Create new user
\&  my $add = $ldap\->user_create({
\&                                        fname => $first_name,
\&                                        lname => $last_name,
\&                                        zaid => $zaid,
\&                                        cell => $cell,
\&                                        mail => $mail,
\&                                        dep => $department,
\&                                        manager => $manager,
\&                                        comp => $company,
\&                                        });
\&
\&  # Update User
\&  my $update = $ldap\->({dn => $dn, field => $field, value => $value });
\&
\&  # Forgot Password
\&  my $pass = $ldap\->forgot_pass({mail => $mail, otp => $otp, newpass => $newpassword, confirmpass => $confirmpass});
\&
\&  # Address Book / Search (givenName, sn, department, title)
\&  my $add = $ldap\->address_book({filter => "title=perl developer"});
\&
\&  # Create Session
\&  my $sess = $ldap\->session_create({username => $username,password => $password});
\&
\&  #Get Session Details
\&  my $sess_get = $ldap\->session_get({session_key => $key});    
\&
\&  #Store Value
\&  my $sess = $ldap\->session_store_set({session_key => "f8542c0522489bed9843ce7adf51dd88", field => "Role", value => "100"});
\&
\&  #Get Value
\&  my $get = $ldap\->session_store_get({session_key => "f8542c0522489bed9843ce7adf51dd88", field => "Role"});
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Affinity Perl \s-1API\s0 to communicate with Active Directory.
This module does common related task to search, update and remove Active Directory data.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default. Object Orientated Programming.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Carp qw(croak);
Net::LDAP;
Net::LDAPS;
Unicode::String qw(utf8 utf16le);
Digest::MD5 qw(md5_hex);
Data::Dumper;
Affinity::Validate;
String::MkPasswd qw(mkpasswd);
Redis::Client;
URI::Escape::XS;
LWP::Simple qw(get);
\&\s-1JSON::XS\s0;
#Service::LDAP::Core;
\&\s-1UUID\s0 qw(uuid);
\&\s-1JSON::XS\s0;
DateTime;
\&\s-1DBI\s0;
Unicode::Map8;
Unicode::String qw(utf16);
.PP
voip@affinityhealth.co.za
.SH "AUTHOR"
.IX Header "AUTHOR"
Affinity Health, <Affinity Health@>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2021 by Affinity Health
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.26.1 or,
at your option, any later version of Perl 5 you may have available.
